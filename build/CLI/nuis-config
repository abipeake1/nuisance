#!/bin/bash

COMMAND_FQP=${0}
COMMAND=$(basename ${COMMAND_FQP})

if [ ! -z ${NUIS_CLID_DEBUG} ]; then
echo "[CLI DEBUG](BrCr: ${NUIS_BREADCRUMBS}): ${COMMAND} Arguments(${#}): ${@}"
fi

function nuis_config_help {
  echo "Run like: ${NUIS_BREADCRUMBS} [option]"
  echo -e "\tOptions:"
  echo -e "\t  --version                     : print the NUISANCE version string"
  echo -e "\t  --features                    : print the list of optional components"
  echo -e "\t  --generators                  : print the list of supported generators"
  echo -e "\t  --experiments                 : print the list of included experimental samples"
  echo -e "\t  --has-feature <feature>       : return 0 if <feature> is enabled, otherwise 1"
  echo -e "\t  --info <feature>              : print extra information about optional <feature>"
  echo -e "\t  --has-experiment <experiment> : return 0 if <experiment> is enabled, otherwise 1"
}


if [ "${#}" -lt 1 ]; then
  nuis_config_help
  exit 1
fi

NUISANCE_VERSION="2.9.9"

FEATURES=""
GENERATORS=""

T2KReWeight_ENABLED="FALSE"
T2KReWeight_LEGACY_API_ENABLED="FALSE"
if [ "${T2KReWeight_ENABLED}" = "TRUE" ]; then
  if [ "${T2KReWeight_LEGACY_API_ENABLED}" = "TRUE" ]; then
    FEATURES="${FEATURES}:T2KReWeightLegacy"
  else 
    FEATURES="${FEATURES}:T2KReWeight"
  fi
fi

NIWGLegacy_ENABLED="FALSE"
if [ "${NIWGLegacy_ENABLED}" = "TRUE" ]; then
  FEATURES="${FEATURES}:NIWGLegacy"
fi

NOvARwgt_ENABLED="FALSE"
if [ "${NOvARwgt_ENABLED}" = "TRUE" ]; then
  FEATURES="${FEATURES}:NOvARwgt"
fi

nusystematics_ENABLED="FALSE"
if [ "${nusystematics_ENABLED}" = "TRUE" ]; then
  FEATURES="${FEATURES}:nusystematics"
fi

NEUT_ENABLED="FALSE"
if [ "${NEUT_ENABLED}" = "TRUE" ]; then
  FEATURES="${FEATURES}:NEUT"
  GENERATORS="${GENERATORS}:NEUT"

  NEUTReWeight_ENABLED="FALSE"
  if [ "${NEUTReWeight_ENABLED}" = "TRUE" ]; then
    FEATURES="${FEATURES}:NEUTReWeight"
  fi
fi

GENIE_ENABLED="TRUE"
if [ "${GENIE_ENABLED}" = "TRUE" ]; then
  FEATURES="${FEATURES}:GENIE"
  GENERATORS="${GENERATORS}:GENIE"

  GENIEReWeight_ENABLED="TRUE"
  if [ "${GENIEReWeight_ENABLED}" = "TRUE" ]; then
    FEATURES="${FEATURES}:GENIEReWeight"
  fi

  GENIE3_API_ENABLED="TRUE"
  if [ "${GENIE3_API_ENABLED}" = "TRUE" ]; then
    FEATURES="${FEATURES}:GENIE3"
  else
    FEATURES="${FEATURES}:GENIE2"
  fi
fi

NuWro_ENABLED="FALSE"
if [ "${NuWro_ENABLED}" = "TRUE" ]; then
  FEATURES="${FEATURES}:NuWro"
  GENERATORS="${GENERATORS}:NuWro"
fi

Prob3plusplus_ENABLED="FALSE"
if [ "${Prob3plusplus_ENABLED}" = "TRUE" ]; then
  FEATURES="${FEATURES}:Prob3plusplus"
fi

FEATURES="${FEATURES}:"
GENERATORS="${GENERATORS}:"

EXPERIMENTS=""

ANL_ENABLED="OFF"
if [ "${ANL_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:ANL"
fi

ArgoNeuT_ENABLED="OFF"
if [ "${ArgoNeuT_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:ArgoNeuT"
fi

BEBC_ENABLED="OFF"
if [ "${BEBC_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:BEBC"
fi

BNL_ENABLED="OFF"
if [ "${BNL_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:BNL"
fi

Electron_ENABLED="OFF"
if [ "${Electron_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:Electron"
fi

FNAL_ENABLED="OFF"
if [ "${FNAL_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:FNAL"
fi

GGM_ENABLED="OFF"
if [ "${GGM_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:GGM"
fi

K2K_ENABLED="OFF"
if [ "${K2K_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:K2K"
fi

MicroBooNE_ENABLED="OFF"
if [ "${MicroBooNE_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:MicroBooNE"
fi

MINERvA_ENABLED="OFF"
if [ "${MINERvA_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:MINERvA"
fi

MiniBooNE_ENABLED="OFF"
if [ "${MiniBooNE_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:MiniBooNE"
fi

SciBooNE_ENABLED="OFF"
if [ "${SciBooNE_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:SciBooNE"
fi

T2K_ENABLED="OFF"
if [ "${T2K_ENABLED}" = "TRUE" ]; then
  EXPERIMENTS="${EXPERIMENTS}:T2K"
fi

EXPERIMENTS="${EXPERIMENTS}:"

if [ ! -z ${NUIS_CLID_DEBUG} ]; then
echo "[CLI DEBUG](BrCr: ${NUIS_BREADCRUMBS}): \$FEATURES=${FEATURES}"
echo "[CLI DEBUG](BrCr: ${NUIS_BREADCRUMBS}): \$GENERATORS=${GENERATORS}"
echo "[CLI DEBUG](BrCr: ${NUIS_BREADCRUMBS}): \$EXPERIMENTS=${EXPERIMENTS}"
fi

while [[ ${#} -gt 0 ]]; do

  key="$1"
  case $key in

  --version)
    echo "${NUISANCE_VERSION}"
    exit 0
  ;;

  --features)
    echo "${FEATURES}" | sed "s/^://g" | sed "s/:$//g" | sed "s/:/ /g"
    exit 0
  ;;

  --generators)
    echo "${GENERATORS}" | sed "s/^://g" | sed "s/:$//g" | sed "s/:/ /g"
    exit 0
  ;;

  --experiments)
    echo "${EXPERIMENTS}" | sed "s/^://g" | sed "s/:$//g" | sed "s/:/ /g"
    exit 0
  ;;

  --has-feature)

    if [[ ${#} -lt 2 ]]; then
      echo "[ERROR]: ${1} expected a value."
      nuis_config_help
      exit 1
    fi

    TEST_FEATURE=${2}
    if echo "${FEATURES}" | grep -F -q ":${TEST_FEATURE}:"; then
      exit 0
    else 
      exit 1
    fi
    ;;

  --has-experiment)

    if [[ ${#} -lt 2 ]]; then
      echo "[ERROR]: ${1} expected a value."
      nuis_config_help
      exit 1
    fi

    TEST_EXPERIMENT=${2}
    if echo "${EXPERIMENTS}" | grep -F -q ":${TEST_EXPERIMENT}:"; then
      exit 0
    else 
      exit 1
    fi
    ;;

  --info)

    if [[ ${#} -lt 2 ]]; then
      echo "[ERROR]: ${1} expected a value."
      nuis_config_help
      exit 1
    fi

    TEST_FEATURE=${2}
    if ! echo "${FEATURES}" | grep -F -q ":${TEST_FEATURE}:"; then
      echo "[ERROR]: Feature \"${TEST_FEATURE}\" is not enabled."
      exit 1
    fi

    case ${TEST_FEATURE} in

      NEUT)
          echo -e "NEUT Info: "
          echo -e "\tNEUT Location : NEUT_ROOT-NOTFOUND"
          echo -e "\tNEUT Version  : NEUT_VERSION-NOTFOUND"
        ;;

      GENIE)
          echo -e "GENIE Info: "
          echo -e "\tGENIE Location : /opt/genie/3_02_02"
          echo -e "\tGENIE Version  : 3.02.02"
        ;;

      NuWro)
          echo -e "NuWro Info: "
          echo -e "\tNuWro Location :"
        ;;

      *)
        echo "No extra information for feature \"${TEST_FEATURE}\" is available."
        ;;

    esac
    exit 0

  ;;

  help)
    nuis_config_help
    exit 0
    ;;


  *)
    echo "[ERROR]: Unknown argument to ${NUIS_BREADCRUMBS}: \"$1\""
    nuis_config_help
    exit 1
    ;;
  esac
  shift
done
